ubuntu@ip-172-31-49-30:~/packt2/src$ vi App.js
ubuntu@ip-172-31-49-30:~/packt2/src$ cat App.js
import React, { Component } from 'react'
import Web3 from 'web3'
import logo from './logo.svg';
import './App.css';
import { VOTING_ABI, VOTING_ADDRESS } from './config'
//import votingArtifact from "../../build/contracts/Voting.json";
class App extends Component {
        state = { votes: '' }
        componentWillMount(){
                this.loadBlockchainData()
        }

        async loadBlockchainData(){
                //const web3 = new Web3(new Web3.providers.HttpProvider("http://ec2-44-242-136-205.us-west-2.compute.amazonaws.com:8545"))

        const web3 = new Web3(new Web3.providers.HttpProvider("http://ec2-34-222-204-82.us-west-2.compute.amazonaws.com:8545"))

                this.setState( { web3 } )
                var account;

                // does not work right now - have to read in automatic


                web3.eth.getAccounts().then((f) => {
                        account = f[0];
                })
                // MOD THIS TO READ DIRCTLY FROM BUILD DIRECTORY
                // don't forget to copy latest contract to src dirctory
                // let jsonData = require('../../build/contract/Voting.json')
                //just copy the json file to the src directory

     // const networkId = await web3.eth.net.getId();
     // const deployedNetwork = votingArtifact.networks[networkId];



                let jsonData = require('./Voting.json');
                console.log(jsonData.abi)
                console.log(jsonData.networks)
                console.log(Object.keys(jsonData.networks).length)


///             console.log(jsonData['networks']["1658033255086"]["address"])
                var network_ids = jsonData['networks']
                //var nth_address = jsonData['networks'].keys()
                console.log("is this the answer")
                console.log ( Object.keys(jsonData['networks'])[Object.keys(jsonData.networks).length-1] )
                var networkKey =  Object.keys(jsonData['networks'])[Object.keys(jsonData.networks).length-1]
                console.log(jsonData['networks'][networkKey]["address"] )

                //const contract = new web3.eth.Contract(VOTING_ABI);
                const contract = new web3.eth.Contract(jsonData.abi);

                contract.options.address = "0x8c9e2A6A36918da065D311278220081D12aF4163";

                // i need to copy in Voting.json to the right directory.
                contract.options.address = jsonData['networks'][networkKey]["address"]
               contract.options.address = "0x9DC47821cE2CA1aC2b4dAa22Dde66E33390671FD";




                this.setState( { contract })
                //contract.options.address = "0x71789831d83d4C8325b324eA9B5fFB27525480b5";

                const candidates = {"Johnny": "candidate-1", "Amber": "candidate-2"}

                console.log("one")
                await contract.methods.totalVotesFor(web3.utils.asciiToHex('Johnny')).call(console.log)
                console.log("two")


                const number = await contract.methods.totalVotesFor(web3.utils.asciiToHex('Johnny')).call(console.log)
                console.log("two")
                this.setState( { johnnyVote : parseInt(number) } )



                const output =    await contract.methods.totalVotesFor(web3.utils.asciiToHex('Johnny')).call()
                console.log(output)


                await contract.methods.voteForCandidate(web3.utils.asciiToHex('Johnny')).send({gas: 140000, from: '0xD8c8b71EdD4c80B82Fc0E31a2cD8A24dCbf16cD6' });

                console.log("three")

                await contract.methods.totalVotesFor(web3.utils.asciiToHex('Johnny')).call(console.log)

        }

  constructor(props){
                super(props)
                this.state = {
                        account: '',
                        johnnyVote: 0,
                        amberVote: 0,
                        loading: true
                        //data: todoList   // new portion

                }

        console.log("constructor")

  this.vote = this.vote.bind(this)

 //  this.voteForJohnny = this.voteForJohnny.bind(this)
 //  this.voteForAmber = this.voteForAmber.bind(this)

  }
 vote =()=> {
// I cannot declare an async() function outside fo the main function
         // // I cannot get a promise to be fufilled by
         // without using the await -> for which i need async()

         //async function
// best so far ....     voteForCandidate = () => {
//voteForCandidate: async () => {
        this.state.contract.methods.voteForCandidate(this.state.web3.utils.asciiToHex('Johnny')).send({gas: 140000, from: '0xD8c8b71EdD4c80B82Fc0E31a2cD8A24dCbf16cD6'  });
        console.log("voteForCandidate")
        var count = this.state.contract.methods.totalVotesFor(this.state.web3.utils.asciiToHex('Johnny')).call();
        console.log('just before the count')
        console.log(count.toString)
        var num = count.toString
        console.log(num)
        this.setState( (prevState) => ({  johnnyVote: prevState.johnnyVote + 1}));
var b;
 var count2 = this.state.contract.methods.totalVotesFor(this.state.web3.utils.asciiToHex('Johnny')).call().then(function (f) { b = f});
console.log(count2)

     const output2 =    this.state.contract.methods.totalVotesFor(this.state.web3.utils.asciiToHex('Johnny')).call()
                console.log(output2)


 }
         //             this.setState({johnnyCount: count })

         //           console.log(count)
//            this.setState((prevState) => ({ johnnyCount: prevState.johnnyCount + 1}));

  //    }



render(){

        return (
            <>
                <div>
                    <button onClick={this.vote}> Uni Instruction</button>
                    <button onClick={this.Scllevel}> School Instruction</button>
                </div>
                <h5>Johnny count: {this.state.johnnyVote}</h5>
                <h5>Amber count: {this.state.amberVote}</h5>
            </>
        );
    }



}

export default App;
